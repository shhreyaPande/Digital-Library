JPA has 2 types of relationships:

1. Bidirectional Relationship (student and Book dono mein mapping hogi)
2. Unidirectional Relationship (bss Book mein mapping hogi [jisme foreign key hai])

#  One to One
#  One to Many
#  Many to One
#  Many to Many
The first part of the JPA Join annotations belong to the class in which we are writing the
annotation and the second part is written keeping in mind the entity on top of which we
are writing this annotation

--------------------------------------------------------------------------------------------
# DTOs (Data Transfer Object)--> are the classes which are used to transferring data across
          different java classes mostly used in requests and responses coming from the
          client or are being sent to the client as a response.

   * No Business Logic: DTOs are simple objects that contain only fields and
     accessors (getters/setters).
   * Optimized for Transfer: They include only the data needed for a specific operation,
     reducing payload size.
   * Decoupling: They help separate internal domain models from external representations,
     making systems more flexible and secure.
# Common Use Cases
          - APIs: Sending structured data to clients without exposing internal models.
          - Remote Calls: Reducing the number of method calls by bundling parameters.
          - Serialization: Preparing data for formats like JSON or XML.

# These are also known as POJO -> plain old java object
--------------------------------------------------------------------------------------------
# If you need to alter the message sent in the postman or as part of errors, you need to
  handle it via an interceptor class like controllerAdvice

--------------------------------------------------------------------------------------------
# Controller --> Service --> Repository --> Model --> DB
   DTO(User give dto as i/p) --------->     model(which is later converted into a model)

--------------------------------------------------------------------------------------------
# CommandLineRunner ---> functionality that anyone can use for different purposes:
 (it's an interface)

    1. For debugging without actually hitting the APIs.
    2. Call JVM's garbage collector manually to clean up all the unused references.
    3. File System Cleaning or creating some temporary files or folders on the file system

--------------------------------------------------------------------------------------------
# Searching is not present in a single unified GET API

# Let's suppose books has 1M records => 50 MB od Data
  1. Pagination: Page Number, Limit of the Page
  2. Searching(Search on pages): optional, depends upon product requirement
  3. Sorting(sorting on certain fields): optional
  4. Filtering: optional, depends upon product requirement

--------------------------------------------------------------------------------------------
Lecture 30:
# Unit test cases are basically the test cases written for a particular flow or function to
  verify if given certain test inputs, the code works as expected or not

Expectation from the code                          Actual output from the code
transactionId                                            transaction obj
(here the expectation does not match with the actual output)

Dev 1    --> Issue transaction code --> Jan 2023
         --> Unit test cases related to issue transaction (T1, T2)
Dev 2    --> Adding the auditing in issue transaction flow --> July 2025
         --> Existing unit test cases T1 & T2 might fail due to the code bug in Dev2's code

2 possibilities
1) His / her code is incorrect due to which the unit test fails

Expectation from the code wrt UT                  Actual output from the code wrt UT
                                                   (wrong)

2) Due to dev2's changes which are correct but the unit test case needs to be updated to
   include dev2's changes as well

Expectation from the code wrt UT                     Actual output from the code wrt UT
            (wrong)                                           (right)

Code will start breaking ...


Ques. Why unit tests are required ?
1)  To verify the behaviour of the code
2)  To check existing functionality is not breaking
3)  Increase code coverage

--------------------------------------------------------------------------------------------
# Mock call or mocking an API call - when the API is called and when it returns certain response,
  we are not going to that actually, instead we will mock this flow i.e, we will say whenever
  such call happens, we can specify a dummy data

# Mockito framework / dependency allows us to mock the data coming from a certain flow

# Junit is used for verifying the output with the expected output, writing assertions, checking
  how many times a class' function has been called
# Junit is a library which provides various techniques of validations


@InjectMocks -> Creates an instance of the class on top of which we are writing this
                annotation in a test class (~ @Component annotation defined in the actual
                source code i.e main directory)

@Mock -> @InjectMocks + autowires the dependency of the class on top of which we are writing
         in the class which is having @InjectMocks annotation

# Wherever logic is applied, assertion makes more sense. without logic, assertion may
  or may not make any sense, only verification required

